{{ WARNING_QUOTE }}
FROM amazonlinux:{{OSVERSION}} as base
LABEL org.opencontainers.image.authors="emanuel@ongres.com,xavisierra@ongres.com"


ARG MAX_JOBS
ENV TAG={{ TAG }}
ENV MAX_JOBS=${MAX_JOBS:-2}
ENV ANTLR_VERSION={{ ANTLR_VERSION }}
ENV BABELFISH_VERSION={{ BABELFISH_VERSION }}

ENV MAX_JOBS=${MAX_JOBS:-2}

ENV PREFIX=/usr/local/babelfishpg-${BABELFISH_VERSION}
ENV ANTLR_RUNTIME=/opt/antlr4
ENV ANTLR_VERSION=${ANTLR_VERSION:-4.9.3}

ENV PG_SRC=/opt/${TAG}/
ENV PG_CONFIG=${PREFIX}/bin/pg_config
ENV ANTLR4_RUNTIME_INCLUDE_DIR=/usr/local/include/antlr4-runtime/

ENV ANTLR4_JAVA_BIN=/usr/bin/java


RUN yum update -y

RUN yum install -y gcc gcc-c++ kernel-devel make \
    bison flex libxml2-devel readline-devel zlib-devel \
    uuid-devel pkg-config openssl-devel \
    libicu-devel postgresql-devel perl git \
    shadow-utils wget unzip curl cmake3 libuuid-devel \
    java pam-devel libxslt-devel openldap-devel \
    gettext-devel

RUN ln -s /usr/bin/cmake3 /usr/bin/cmake

ENV PATH="${PREFIX}/bin:${PATH}"

RUN curl -L https://github.com/babelfish-for-postgresql/babelfish-for-postgresql/releases/download/${TAG}/${TAG}.zip \
    --output ${TAG}.zip && unzip -d /opt/ ${TAG}.zip 

# Compiling and installing antlr runtime
ENV ANTLR_EXECUTABLE=${PG_SRC}/contrib/babelfishpg_tsql/antlr/thirdparty/antlr/antlr-${ANTLR_VERSION}-complete.jar

# RUN curl https://www.antlr.org/download/antlr-${ANTLR_VERSION}-complete.jar \
#         --output ${ANTLR_EXECUTABLE} && chmod +x ${ANTLR_EXECUTABLE}

RUN curl https://www.antlr.org/download/antlr4-cpp-runtime-${ANTLR_VERSION}-source.zip \
        --output /opt/antlr4-cpp-runtime-${ANTLR_VERSION}-source.zip && \
        unzip -d ${ANTLR_RUNTIME} /opt/antlr4-cpp-runtime-${ANTLR_VERSION}-source.zip

RUN mkdir ${ANTLR_RUNTIME}/build
WORKDIR ${ANTLR_RUNTIME}/build

RUN cmake .. -DANTLR_JAR_LOCATION="${ANTLR_EXECUTABLE}" \
        -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_DEMO=True && \
    make && make install


WORKDIR ${PG_SRC}

RUN ./configure CFLAGS="${CFLAGS:--Wall -ggdb -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic}" \
  --prefix=${PREFIX} \
  --enable-debug \
  --with-ldap \
  --with-libxml \
  --with-pam \
  --with-uuid=ossp \
  --enable-nls \
  --with-libxslt \
  --with-icu
  
# Engine Compilation
RUN make clean && make DESTDIR=${PREFIX}/tmp_install -j ${MAX_JOBS} world-bin && make install

WORKDIR ${PG_SRC}/contrib
# Built-in contrib installation
RUN make
RUN make install

RUN cp /usr/local/lib/libantlr4-runtime.so.${ANTLR_VERSION} ${PREFIX}/lib

ENV USE_PGXS=1

RUN ["/usr/bin/bash", "-c", "cd ${PG_SRC}/contrib/babelfishpg_tsql/antlr ; cmake . "]

RUN PG_CONFIG=${PG_CONFIG} PG_SRC=${PG_SRC} cmake=$(which cmake) ANTLR4_RUNTIME_LIBRARIES=/usr/include/antlr4-runtime ; \
    for EXT in babelfishpg_common babelfishpg_money babelfishpg_tds babelfishpg_tsql ; \
    do \
        cd ${PG_SRC}/contrib/${EXT} ; \
        make clean && make && make install ; \
    done

RUN yum clean all

FROM base AS babelfishpg
COPY --from=base ${PREFIX}/ /usr/local/

ENV DEBIAN_FRONTEND=noninteractive
ENV PATH="${PREFIX}/bin:${PATH}"
ENV PGDATA="/var/lib/postgresql/data"
ENV DOCKER_ENTRYPOINT="/usr/local/bin/entrypoint.sh"


RUN yum update -y \
    yum install -y uuid  pkgconfig.x86_64 openssl \
    libicu perl openldap.x86_64 libxslt.x86_64 \
    shadow-utils libuuid-devel openldap pam gettext


# Create postgres user
RUN useradd postgres  && usermod -a -G postgres postgres

# Sample default ready for Babelfish to run
RUN set -eux; \
    sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    sed -ri "s+#?shared_preload_libraries.*+shared_preload_libraries = 'babelfishpg_tds'+g" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    sed -i -e "\$ababelfishpg_tds.listen_addresses = '*'"  "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "listen_addresses = '*'" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "shared_preload_libraries = 'babelfishpg_tds'" "${PREFIX}/share/postgresql/postgresql.conf.sample"; \
    grep -F "babelfishpg_tds.listen_addresses = '*'" "${PREFIX}/share/postgresql/postgresql.conf.sample";

RUN mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"

COPY entrypoint.sh ${DOCKER_ENTRYPOINT}

RUN chmod -R 0750 "${PREFIX}/share" && \
    chown postgres: ${DOCKER_ENTRYPOINT} && \
    chmod +x ${DOCKER_ENTRYPOINT} && \
    chown -R postgres: ${PREFIX} 

WORKDIR "${PREFIX}/bin/"

RUN yum clean all && rm -rf /var/cache/yum

USER postgres

STOPSIGNAL SIGINT

EXPOSE 1433
EXPOSE 5432

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

CMD ["postgres"]
